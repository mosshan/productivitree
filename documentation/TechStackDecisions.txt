Tech Stack Decisions:

Backend/Frontend Language: TypeScript
Runtime Environment: Node.js
Backend Framework: Express.js
FrontEnd Framework: React
Storage: mix of database + local storage
Database: PostgreSQL or MySQL
Hosting: locally during testing then remotely when in production
Image Storage: S3 bucket
Still to determine: hosting service, database

Language Options:
  JavaScript vs TypeScript: TypeScript
    - aiming for TS for new learning
    - TS has improved safety + additional features

    - If using npm, need a copy of Node.js in environment to run package
        -then can use npm or other to download typescript into project

Storage Options: Start with just local storage and transition to mixed mode
  local storage vs Database: Both! ,  
    - local storage is limited to 5 MiB
        - this also will be shared w other applications
    - local storage has greater simplicity but working with a Database will be a good refresher
    - local storage might be cleared unintentionally by user
    - local storage isn't shared from browser to browser
        - if a user uses diff browser, it won't have their data
    - Mixed option:
        - some data in local storage, some in database:
          - session options in local storage
              - could pull data from database when extension started
          - database holding information I want to transfer connected to user:
              - blacklists
              - trees
          

  Database options:
    - considerations:
      - for the application, I have a clear schema for my data (general CRUD app)
      - Need a low cost option
      - I would like to work with SQL
      - needs to be integratable with my Stack
      - Doesn't need to be able to handle large amts of data

    - relational vs nonrelational: relational
      - relational: (MySQL, PostgreSQL, etc)
        - fast data storage + recovery
        - can handle large amts of data + complex SQL queries
        - need schema design
      - nonrelational: (MongoDB, CouchDB, Cassandra)
        - allows for diff structures than SQL database
        - more flexibility to use format fitting data best
        - good horizontal scaling

    - PostgreSQL vs MySQL:
      - Postgres:
        - better performance on large amounts of data
        - more advanced functionality
        - more reliable data storage
      - MySQL:
        - easier setup
        - better performance for smaller amts of data
        
  Hosting Options:
    - Local when testing, remote when deployed
    - Image Storage: save static data in S3 and reference in DB
        - look into domain sharding- CloudFront
        - need place to store images which are generated
        - doesnt make sense to regenerate as we go
    Database Hosting:
      - Supabase:
        - big data allowances on free tier
        - uses PostgreSQL
        - open source
        - newer and potentially less reliale
      - AWS: 
      - AWS: Amazon DynamoDB
        - NoSQL 
        - Free Tier: 
          - 25GB of storage
      - Firebase
      - Digital Ocean
      - Virtual Private Server


